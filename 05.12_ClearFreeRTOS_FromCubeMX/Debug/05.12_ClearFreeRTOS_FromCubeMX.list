
05.12_ClearFreeRTOS_FromCubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e5c  08002e5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004010  20000010  08002e74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004020  08002e74  00024020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b22e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002037  00000000  00000000  0002b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000940  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169d5  00000000  00000000  0002e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000def2  00000000  00000000  0004520d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000914c3  00000000  00000000  000530ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030cc  00000000  00000000  000e45c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000e7690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e14 	.word	0x08002e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08002e14 	.word	0x08002e14

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000080 	.word	0x20000080

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]

      /* Create the task, storing the handle. */
      xReturned = xTaskCreate(
 800051a:	463b      	mov	r3, r7
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2300      	movs	r3, #0
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	4908      	ldr	r1, [pc, #32]	; (8000548 <MX_FREERTOS_Init+0x38>)
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <MX_FREERTOS_Init+0x3c>)
 800052a:	f001 faf6 	bl	8001b1a <xTaskCreate>
 800052e:	6078      	str	r0, [r7, #4]
					  configMINIMAL_STACK_SIZE,      /* Stack size in words, not bytes. */
                      ( void * ) 1,    /* Parameter passed into the task. */
                      tskIDLE_PRIORITY,/* Priority at which the task is created. */
                      &xHandle );      /* Used to pass out the created task's handle. */

      if( xReturned == pdPASS )
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d103      	bne.n	800053e <MX_FREERTOS_Init+0x2e>
      {
          /* The task was created.  Use the task's handle to delete the task. */
          vTaskDelete( xHandle );
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fc25 	bl	8001d88 <vTaskDelete>
      }
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08002e2c 	.word	0x08002e2c
 800054c:	08000551 	.word	0x08000551

08000550 <vTaskCode>:
//  }
//  /* USER CODE END StartDefaultTask */
//}
//
void vTaskCode( void * pvParameters )
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    pvParameters value in the call to xTaskCreate() below.
    configASSERT( ( ( uint32_t ) pvParameters ) == 1 );*/

    for( ;; )
    {
        vTaskDelay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f001 fca5 	bl	8001ea8 <vTaskDelay>
 800055e:	e7fb      	b.n	8000558 <vTaskCode+0x8>

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_GPIO_Init+0x4c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <MX_GPIO_Init+0x4c>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_GPIO_Init+0x4c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_GPIO_Init+0x4c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <MX_GPIO_Init+0x4c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_GPIO_Init+0x4c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 f986 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f808 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f7ff ffd0 	bl	8000560 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80005c0:	f7ff ffa6 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  vTaskStartScheduler();
 80005c4:	f001 fca4 	bl	8001f10 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x18>
	...

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fbee 	bl	8002dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <SystemClock_Config+0xd0>)
 800061a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000640:	2319      	movs	r3, #25
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000644:	23a8      	movs	r3, #168	; 0xa8
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fa59 	bl	8000b0c <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000660:	f000 f830 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fcbb 	bl	8000ffc <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800068c:	f000 f81a 	bl	80006c4 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b2:	f000 f929 	bl	8000908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010000 	.word	0x40010000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_MspInit+0x54>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	4a11      	ldr	r2, [pc, #68]	; (8000724 <HAL_MspInit+0x54>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e4:	6453      	str	r3, [r2, #68]	; 0x44
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x54>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_MspInit+0x54>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <HAL_MspInit+0x54>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_MspInit+0x54>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	210f      	movs	r1, #15
 8000712:	f06f 0001 	mvn.w	r0, #1
 8000716:	f000 f9cf 	bl	8000ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <HAL_InitTick+0xd0>)
 800073e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000740:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <HAL_InitTick+0xd0>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6453      	str	r3, [r2, #68]	; 0x44
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <HAL_InitTick+0xd0>)
 800074a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000754:	f107 020c 	add.w	r2, r7, #12
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fe18 	bl	8001394 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000764:	f000 fe02 	bl	800136c <HAL_RCC_GetPCLK2Freq>
 8000768:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HAL_InitTick+0xd4>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	0c9b      	lsrs	r3, r3, #18
 8000774:	3b01      	subs	r3, #1
 8000776:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_InitTick+0xd8>)
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <HAL_InitTick+0xdc>)
 800077c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <HAL_InitTick+0xd8>)
 8000780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <HAL_InitTick+0xd8>)
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_InitTick+0xd8>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_InitTick+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_InitTick+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <HAL_InitTick+0xd8>)
 80007a0:	f000 fe2a 	bl	80013f8 <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <HAL_InitTick+0xd8>)
 80007b4:	f000 fe7a 	bl	80014ac <HAL_TIM_Base_Start_IT>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d111      	bne.n	80007ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007c6:	2019      	movs	r0, #25
 80007c8:	f000 f992 	bl	8000af0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d808      	bhi.n	80007e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80007d2:	2200      	movs	r2, #0
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	2019      	movs	r0, #25
 80007d8:	f000 f96e 	bl	8000ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_InitTick+0xe0>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e002      	b.n	80007ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	20000280 	.word	0x20000280
 8000804:	40010000 	.word	0x40010000
 8000808:	20000004 	.word	0x20000004

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800083e:	f000 fe97 	bl	8001570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000280 	.word	0x20000280

0800084c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <SystemInit+0x20>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <SystemInit+0x20>)
 8000858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800085c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000876:	490e      	ldr	r1, [pc, #56]	; (80008b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800088c:	4c0b      	ldr	r4, [pc, #44]	; (80008bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800089a:	f7ff ffd7 	bl	800084c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089e:	f002 fa95 	bl	8002dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a2:	f7ff fe85 	bl	80005b0 <main>
  bx  lr    
 80008a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008b4:	08002e64 	.word	0x08002e64
  ldr r2, =_sbss
 80008b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008bc:	20004020 	.word	0x20004020

080008c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_Init+0x40>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_Init+0x40>)
 80008da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x40>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f8d8 	bl	8000aa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f7ff ff18 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff feea 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023c00 	.word	0x40023c00

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	200002c8 	.word	0x200002c8

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200002c8 	.word	0x200002c8

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ff4c 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aca:	f7ff ff61 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000ace:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	6978      	ldr	r0, [r7, #20]
 8000ad6:	f7ff ffb1 	bl	8000a3c <NVIC_EncodePriority>
 8000ada:	4602      	mov	r2, r0
 8000adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff80 	bl	80009e8 <__NVIC_SetPriority>
}
 8000ae8:	bf00      	nop
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff54 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e267      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d075      	beq.n	8000c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b2a:	4b88      	ldr	r3, [pc, #544]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d00c      	beq.n	8000b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b36:	4b85      	ldr	r3, [pc, #532]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d112      	bne.n	8000b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b42:	4b82      	ldr	r3, [pc, #520]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b4e:	d10b      	bne.n	8000b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b50:	4b7e      	ldr	r3, [pc, #504]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d05b      	beq.n	8000c14 <HAL_RCC_OscConfig+0x108>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d157      	bne.n	8000c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e242      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b70:	d106      	bne.n	8000b80 <HAL_RCC_OscConfig+0x74>
 8000b72:	4b76      	ldr	r3, [pc, #472]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a75      	ldr	r2, [pc, #468]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e01d      	b.n	8000bbc <HAL_RCC_OscConfig+0xb0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b88:	d10c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x98>
 8000b8a:	4b70      	ldr	r3, [pc, #448]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a6f      	ldr	r2, [pc, #444]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b6d      	ldr	r3, [pc, #436]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a6c      	ldr	r2, [pc, #432]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e00b      	b.n	8000bbc <HAL_RCC_OscConfig+0xb0>
 8000ba4:	4b69      	ldr	r3, [pc, #420]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a68      	ldr	r2, [pc, #416]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b66      	ldr	r3, [pc, #408]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a65      	ldr	r2, [pc, #404]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d013      	beq.n	8000bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff feb4 	bl	8000930 <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff feb0 	bl	8000930 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	; 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e207      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f0      	beq.n	8000bcc <HAL_RCC_OscConfig+0xc0>
 8000bea:	e014      	b.n	8000c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bec:	f7ff fea0 	bl	8000930 <HAL_GetTick>
 8000bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf2:	e008      	b.n	8000c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf4:	f7ff fe9c 	bl	8000930 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b64      	cmp	r3, #100	; 0x64
 8000c00:	d901      	bls.n	8000c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c02:	2303      	movs	r3, #3
 8000c04:	e1f3      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1f0      	bne.n	8000bf4 <HAL_RCC_OscConfig+0xe8>
 8000c12:	e000      	b.n	8000c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d063      	beq.n	8000cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c22:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d11c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c3a:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d116      	bne.n	8000c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <HAL_RCC_OscConfig+0x152>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d001      	beq.n	8000c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e1c7      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4937      	ldr	r1, [pc, #220]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c72:	e03a      	b.n	8000cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d020      	beq.n	8000cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c7c:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <HAL_RCC_OscConfig+0x244>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c82:	f7ff fe55 	bl	8000930 <HAL_GetTick>
 8000c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c88:	e008      	b.n	8000c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8a:	f7ff fe51 	bl	8000930 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e1a8      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f0      	beq.n	8000c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4925      	ldr	r1, [pc, #148]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
 8000cbc:	e015      	b.n	8000cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_RCC_OscConfig+0x244>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fe34 	bl	8000930 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fe30 	bl	8000930 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e187      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d036      	beq.n	8000d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d016      	beq.n	8000d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_RCC_OscConfig+0x248>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d04:	f7ff fe14 	bl	8000930 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fe10 	bl	8000930 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e167      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_RCC_OscConfig+0x240>)
 8000d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f0      	beq.n	8000d0c <HAL_RCC_OscConfig+0x200>
 8000d2a:	e01b      	b.n	8000d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_RCC_OscConfig+0x248>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d32:	f7ff fdfd 	bl	8000930 <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d38:	e00e      	b.n	8000d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3a:	f7ff fdf9 	bl	8000930 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d907      	bls.n	8000d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e150      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	42470000 	.word	0x42470000
 8000d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d58:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1ea      	bne.n	8000d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 8097 	beq.w	8000ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d76:	4b81      	ldr	r3, [pc, #516]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b7d      	ldr	r3, [pc, #500]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a7c      	ldr	r2, [pc, #496]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b7a      	ldr	r3, [pc, #488]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da2:	4b77      	ldr	r3, [pc, #476]	; (8000f80 <HAL_RCC_OscConfig+0x474>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d118      	bne.n	8000de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dae:	4b74      	ldr	r3, [pc, #464]	; (8000f80 <HAL_RCC_OscConfig+0x474>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a73      	ldr	r2, [pc, #460]	; (8000f80 <HAL_RCC_OscConfig+0x474>)
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fdb9 	bl	8000930 <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc2:	f7ff fdb5 	bl	8000930 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e10c      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd4:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <HAL_RCC_OscConfig+0x474>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x2ea>
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dec:	4a63      	ldr	r2, [pc, #396]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6713      	str	r3, [r2, #112]	; 0x70
 8000df4:	e01c      	b.n	8000e30 <HAL_RCC_OscConfig+0x324>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b05      	cmp	r3, #5
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x30c>
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6713      	str	r3, [r2, #112]	; 0x70
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0e:	4a5b      	ldr	r2, [pc, #364]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6713      	str	r3, [r2, #112]	; 0x70
 8000e16:	e00b      	b.n	8000e30 <HAL_RCC_OscConfig+0x324>
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1c:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	6713      	str	r3, [r2, #112]	; 0x70
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e28:	4a54      	ldr	r2, [pc, #336]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e2a:	f023 0304 	bic.w	r3, r3, #4
 8000e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d015      	beq.n	8000e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e38:	f7ff fd7a 	bl	8000930 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3e:	e00a      	b.n	8000e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e40:	f7ff fd76 	bl	8000930 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e0cb      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e56:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0ee      	beq.n	8000e40 <HAL_RCC_OscConfig+0x334>
 8000e62:	e014      	b.n	8000e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e64:	f7ff fd64 	bl	8000930 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6a:	e00a      	b.n	8000e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fd60 	bl	8000930 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e0b5      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1ee      	bne.n	8000e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d105      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e94:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a1 	beq.w	8000fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eaa:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d05c      	beq.n	8000f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d141      	bne.n	8000f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_RCC_OscConfig+0x478>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fd34 	bl	8000930 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ecc:	f7ff fd30 	bl	8000930 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e087      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	085b      	lsrs	r3, r3, #1
 8000f02:	3b01      	subs	r3, #1
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	491b      	ldr	r1, [pc, #108]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_RCC_OscConfig+0x478>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fd09 	bl	8000930 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f22:	f7ff fd05 	bl	8000930 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e05c      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x416>
 8000f40:	e054      	b.n	8000fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_RCC_OscConfig+0x478>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fcf2 	bl	8000930 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f50:	f7ff fcee 	bl	8000930 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e045      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_RCC_OscConfig+0x470>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x444>
 8000f6e:	e03d      	b.n	8000fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e038      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000
 8000f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_RCC_OscConfig+0x4ec>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d028      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d121      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d11a      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fb8:	4013      	ands	r3, r2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d111      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d107      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d001      	beq.n	8000fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0cc      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d90c      	bls.n	8001038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	4b63      	ldr	r3, [pc, #396]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0b8      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001050:	4b59      	ldr	r3, [pc, #356]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a58      	ldr	r2, [pc, #352]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800105a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001068:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001074:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	494d      	ldr	r1, [pc, #308]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	4313      	orrs	r3, r2
 8001084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d044      	beq.n	800111c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d107      	bne.n	80010aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d119      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e07f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d003      	beq.n	80010ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e06f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e067      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010da:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f023 0203 	bic.w	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4934      	ldr	r1, [pc, #208]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010ec:	f7ff fc20 	bl	8000930 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	e00a      	b.n	800110a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f4:	f7ff fc1c 	bl	8000930 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e04f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 020c 	and.w	r2, r3, #12
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	429a      	cmp	r2, r3
 800111a:	d1eb      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d20c      	bcs.n	8001144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e032      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4916      	ldr	r1, [pc, #88]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	490e      	ldr	r1, [pc, #56]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001182:	f000 f821 	bl	80011c8 <HAL_RCC_GetSysClockFreq>
 8001186:	4602      	mov	r2, r0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	490a      	ldr	r1, [pc, #40]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	5ccb      	ldrb	r3, [r1, r3]
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_RCC_ClockConfig+0x1c8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fac0 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00
 80011b8:	40023800 	.word	0x40023800
 80011bc:	08002e3c 	.word	0x08002e3c
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011cc:	b090      	sub	sp, #64	; 0x40
 80011ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e0:	4b59      	ldr	r3, [pc, #356]	; (8001348 <HAL_RCC_GetSysClockFreq+0x180>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d00d      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x40>
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	f200 80a1 	bhi.w	8001334 <HAL_RCC_GetSysClockFreq+0x16c>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HAL_RCC_GetSysClockFreq+0x34>
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d003      	beq.n	8001202 <HAL_RCC_GetSysClockFreq+0x3a>
 80011fa:	e09b      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_GetSysClockFreq+0x184>)
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001200:	e09b      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001202:	4b53      	ldr	r3, [pc, #332]	; (8001350 <HAL_RCC_GetSysClockFreq+0x188>)
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001206:	e098      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001208:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_GetSysClockFreq+0x180>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_RCC_GetSysClockFreq+0x180>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d028      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121e:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_RCC_GetSysClockFreq+0x180>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	099b      	lsrs	r3, r3, #6
 8001224:	2200      	movs	r2, #0
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	627a      	str	r2, [r7, #36]	; 0x24
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001230:	2100      	movs	r1, #0
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_GetSysClockFreq+0x188>)
 8001234:	fb03 f201 	mul.w	r2, r3, r1
 8001238:	2300      	movs	r3, #0
 800123a:	fb00 f303 	mul.w	r3, r0, r3
 800123e:	4413      	add	r3, r2
 8001240:	4a43      	ldr	r2, [pc, #268]	; (8001350 <HAL_RCC_GetSysClockFreq+0x188>)
 8001242:	fba0 1202 	umull	r1, r2, r0, r2
 8001246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001248:	460a      	mov	r2, r1
 800124a:	62ba      	str	r2, [r7, #40]	; 0x28
 800124c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800124e:	4413      	add	r3, r2
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	2200      	movs	r2, #0
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	61fa      	str	r2, [r7, #28]
 800125a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800125e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001262:	f7fe ffbd 	bl	80001e0 <__aeabi_uldivmod>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4613      	mov	r3, r2
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800126e:	e053      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_RCC_GetSysClockFreq+0x180>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	2200      	movs	r2, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	617a      	str	r2, [r7, #20]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001282:	f04f 0b00 	mov.w	fp, #0
 8001286:	4652      	mov	r2, sl
 8001288:	465b      	mov	r3, fp
 800128a:	f04f 0000 	mov.w	r0, #0
 800128e:	f04f 0100 	mov.w	r1, #0
 8001292:	0159      	lsls	r1, r3, #5
 8001294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001298:	0150      	lsls	r0, r2, #5
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	ebb2 080a 	subs.w	r8, r2, sl
 80012a2:	eb63 090b 	sbc.w	r9, r3, fp
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012ba:	ebb2 0408 	subs.w	r4, r2, r8
 80012be:	eb63 0509 	sbc.w	r5, r3, r9
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	00eb      	lsls	r3, r5, #3
 80012cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012d0:	00e2      	lsls	r2, r4, #3
 80012d2:	4614      	mov	r4, r2
 80012d4:	461d      	mov	r5, r3
 80012d6:	eb14 030a 	adds.w	r3, r4, sl
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	eb45 030b 	adc.w	r3, r5, fp
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012ee:	4629      	mov	r1, r5
 80012f0:	028b      	lsls	r3, r1, #10
 80012f2:	4621      	mov	r1, r4
 80012f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012f8:	4621      	mov	r1, r4
 80012fa:	028a      	lsls	r2, r1, #10
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001302:	2200      	movs	r2, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	60fa      	str	r2, [r7, #12]
 8001308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130c:	f7fe ff68 	bl	80001e0 <__aeabi_uldivmod>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4613      	mov	r3, r2
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_GetSysClockFreq+0x180>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	0c1b      	lsrs	r3, r3, #16
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	3301      	adds	r3, #1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001332:	e002      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetSysClockFreq+0x184>)
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800133a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800133c:	4618      	mov	r0, r3
 800133e:	3740      	adds	r7, #64	; 0x40
 8001340:	46bd      	mov	sp, r7
 8001342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	00f42400 	.word	0x00f42400
 8001350:	017d7840 	.word	0x017d7840

08001354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_RCC_GetHCLKFreq+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001370:	f7ff fff0 	bl	8001354 <HAL_RCC_GetHCLKFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	0b5b      	lsrs	r3, r3, #13
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	4903      	ldr	r1, [pc, #12]	; (8001390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	08002e4c 	.word	0x08002e4c

08001394 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	220f      	movs	r2, #15
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_RCC_GetClockConfig+0x60>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e041      	b.n	800148e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f839 	bl	8001496 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f000 f9ca 	bl	80017d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d001      	beq.n	80014c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e044      	b.n	800154e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_TIM_Base_Start_IT+0xb0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d018      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x6c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ee:	d013      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x6c>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_TIM_Base_Start_IT+0xb4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00e      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x6c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_TIM_Base_Start_IT+0xb8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d009      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x6c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_TIM_Base_Start_IT+0xbc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d004      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x6c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_TIM_Base_Start_IT+0xc0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b06      	cmp	r3, #6
 8001528:	d010      	beq.n	800154c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800153a:	e007      	b.n	800154c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40010000 	.word	0x40010000
 8001560:	40000400 	.word	0x40000400
 8001564:	40000800 	.word	0x40000800
 8001568:	40000c00 	.word	0x40000c00
 800156c:	40014000 	.word	0x40014000

08001570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d122      	bne.n	80015cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d11b      	bne.n	80015cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0202 	mvn.w	r2, #2
 800159c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8ee 	bl	8001794 <HAL_TIM_IC_CaptureCallback>
 80015b8:	e005      	b.n	80015c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8e0 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8f1 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d122      	bne.n	8001620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d11b      	bne.n	8001620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0204 	mvn.w	r2, #4
 80015f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8c4 	bl	8001794 <HAL_TIM_IC_CaptureCallback>
 800160c:	e005      	b.n	800161a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8b6 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f8c7 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d122      	bne.n	8001674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b08      	cmp	r3, #8
 800163a:	d11b      	bne.n	8001674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0208 	mvn.w	r2, #8
 8001644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2204      	movs	r2, #4
 800164a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f89a 	bl	8001794 <HAL_TIM_IC_CaptureCallback>
 8001660:	e005      	b.n	800166e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f88c 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f89d 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b10      	cmp	r3, #16
 8001680:	d122      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	d11b      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0210 	mvn.w	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2208      	movs	r2, #8
 800169e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f870 	bl	8001794 <HAL_TIM_IC_CaptureCallback>
 80016b4:	e005      	b.n	80016c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f862 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f873 	bl	80017a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0201 	mvn.w	r2, #1
 80016ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7fe ffd6 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b80      	cmp	r3, #128	; 0x80
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d107      	bne.n	8001720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f8e2 	bl	80018e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d10e      	bne.n	800174c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d107      	bne.n	800174c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f838 	bl	80017bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b20      	cmp	r3, #32
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d107      	bne.n	8001778 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0220 	mvn.w	r2, #32
 8001770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f8ac 	bl	80018d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <TIM_Base_SetConfig+0xe4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00f      	beq.n	8001808 <TIM_Base_SetConfig+0x38>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ee:	d00b      	beq.n	8001808 <TIM_Base_SetConfig+0x38>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <TIM_Base_SetConfig+0xe8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <TIM_Base_SetConfig+0x38>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a30      	ldr	r2, [pc, #192]	; (80018bc <TIM_Base_SetConfig+0xec>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d003      	beq.n	8001808 <TIM_Base_SetConfig+0x38>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <TIM_Base_SetConfig+0xf0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d108      	bne.n	800181a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <TIM_Base_SetConfig+0xe4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01b      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d017      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <TIM_Base_SetConfig+0xe8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <TIM_Base_SetConfig+0xec>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00f      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <TIM_Base_SetConfig+0xf0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00b      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <TIM_Base_SetConfig+0xf4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <TIM_Base_SetConfig+0xf8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d003      	beq.n	800185a <TIM_Base_SetConfig+0x8a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <TIM_Base_SetConfig+0xfc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d108      	bne.n	800186c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <TIM_Base_SetConfig+0xe4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d103      	bne.n	80018a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	615a      	str	r2, [r3, #20]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40000800 	.word	0x40000800
 80018c0:	40000c00 	.word	0x40000c00
 80018c4:	40014000 	.word	0x40014000
 80018c8:	40014400 	.word	0x40014400
 80018cc:	40014800 	.word	0x40014800

080018d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f103 0208 	add.w	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f103 0208 	add.w	r2, r3, #8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f103 0208 	add.w	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d103      	bne.n	80019ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e00c      	b.n	80019d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3308      	adds	r3, #8
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e002      	b.n	80019c8 <vListInsert+0x2e>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d2f6      	bcs.n	80019c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6892      	ldr	r2, [r2, #8]
 8001a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6852      	ldr	r2, [r2, #4]
 8001a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d103      	bne.n	8001a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1e5a      	subs	r2, r3, #1
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	; 0x38
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a78:	f383 8811 	msr	BASEPRI, r3
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a86:	bf00      	nop
 8001a88:	e7fe      	b.n	8001a88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8001a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a94:	f383 8811 	msr	BASEPRI, r3
 8001a98:	f3bf 8f6f 	isb	sy
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	61fb      	str	r3, [r7, #28]
}
 8001aa2:	bf00      	nop
 8001aa4:	e7fe      	b.n	8001aa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001aa6:	2354      	movs	r3, #84	; 0x54
 8001aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b54      	cmp	r3, #84	; 0x54
 8001aae:	d00a      	beq.n	8001ac6 <xTaskCreateStatic+0x66>
	__asm volatile
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	61bb      	str	r3, [r7, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	e7fe      	b.n	8001ac4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ac6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01e      	beq.n	8001b0c <xTaskCreateStatic+0xac>
 8001ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01b      	beq.n	8001b0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9303      	str	r3, [sp, #12]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f850 	bl	8001ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b06:	f000 f8d5 	bl	8001cb4 <prvAddNewTaskToReadyList>
 8001b0a:	e001      	b.n	8001b10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001b10:	697b      	ldr	r3, [r7, #20]
	}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b08c      	sub	sp, #48	; 0x30
 8001b1e:	af04      	add	r7, sp, #16
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 ff5a 	bl	80029e8 <pvPortMalloc>
 8001b34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b3c:	2054      	movs	r0, #84	; 0x54
 8001b3e:	f000 ff53 	bl	80029e8 <pvPortMalloc>
 8001b42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b50:	e005      	b.n	8001b5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f001 f814 	bl	8002b80 <vPortFree>
 8001b58:	e001      	b.n	8001b5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9303      	str	r3, [sp, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f80e 	bl	8001ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b88:	69f8      	ldr	r0, [r7, #28]
 8001b8a:	f000 f893 	bl	8001cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e002      	b.n	8001b9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f023 0307 	bic.w	r3, r3, #7
 8001bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <prvInitialiseNewTask+0x48>
	__asm volatile
 8001bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	617b      	str	r3, [r7, #20]
}
 8001be8:	bf00      	nop
 8001bea:	e7fe      	b.n	8001bea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01f      	beq.n	8001c32 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e012      	b.n	8001c1e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	7819      	ldrb	r1, [r3, #0]
 8001c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	3334      	adds	r3, #52	; 0x34
 8001c08:	460a      	mov	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d9e9      	bls.n	8001bf8 <prvInitialiseNewTask+0x54>
 8001c24:	e000      	b.n	8001c28 <prvInitialiseNewTask+0x84>
			{
				break;
 8001c26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c30:	e003      	b.n	8001c3a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d901      	bls.n	8001c44 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c40:	2306      	movs	r3, #6
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	2200      	movs	r2, #0
 8001c54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	3304      	adds	r3, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fe6c 	bl	8001938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	3318      	adds	r3, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fe67 	bl	8001938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f1c3 0207 	rsb	r2, r3, #7
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	2200      	movs	r2, #0
 8001c84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	69b8      	ldr	r0, [r7, #24]
 8001c94:	f000 fc96 	bl	80025c4 <pxPortInitialiseStack>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001cbc:	f000 fdb2 	bl	8002824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <prvAddNewTaskToReadyList+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <prvAddNewTaskToReadyList+0xb8>)
 8001cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <prvAddNewTaskToReadyList+0xbc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001cd2:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <prvAddNewTaskToReadyList+0xbc>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <prvAddNewTaskToReadyList+0xb8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d110      	bne.n	8001d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ce0:	f000 fb4c 	bl	800237c <prvInitialiseTaskLists>
 8001ce4:	e00d      	b.n	8001d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <prvAddNewTaskToReadyList+0xc0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <prvAddNewTaskToReadyList+0xbc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d802      	bhi.n	8001d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <prvAddNewTaskToReadyList+0xbc>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <prvAddNewTaskToReadyList+0xc4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <prvAddNewTaskToReadyList+0xc4>)
 8001d0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	2201      	movs	r2, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <prvAddNewTaskToReadyList+0xc8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <prvAddNewTaskToReadyList+0xc8>)
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <prvAddNewTaskToReadyList+0xcc>)
 8001d2c:	441a      	add	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f7ff fe0c 	bl	8001952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d3a:	f000 fda3 	bl	8002884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <prvAddNewTaskToReadyList+0xc0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00e      	beq.n	8001d64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <prvAddNewTaskToReadyList+0xbc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <prvAddNewTaskToReadyList+0xd0>)
 8001d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200003cc 	.word	0x200003cc
 8001d70:	200002cc 	.word	0x200002cc
 8001d74:	200003d8 	.word	0x200003d8
 8001d78:	200003e8 	.word	0x200003e8
 8001d7c:	200003d4 	.word	0x200003d4
 8001d80:	200002d0 	.word	0x200002d0
 8001d84:	e000ed04 	.word	0xe000ed04

08001d88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001d90:	f000 fd48 	bl	8002824 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <vTaskDelete+0x18>
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <vTaskDelete+0xf8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e000      	b.n	8001da2 <vTaskDelete+0x1a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fe2f 	bl	8001a0c <uxListRemove>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d115      	bne.n	8001de0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	4932      	ldr	r1, [pc, #200]	; (8001e84 <vTaskDelete+0xfc>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <vTaskDelete+0x58>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	2201      	movs	r2, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <vTaskDelete+0x100>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <vTaskDelete+0x100>)
 8001dde:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3318      	adds	r3, #24
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe0d 	bl	8001a0c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <vTaskDelete+0x104>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <vTaskDelete+0x104>)
 8001dfa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <vTaskDelete+0xf8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d10b      	bne.n	8001e1e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4820      	ldr	r0, [pc, #128]	; (8001e90 <vTaskDelete+0x108>)
 8001e0e:	f7ff fda0 	bl	8001952 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <vTaskDelete+0x10c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <vTaskDelete+0x10c>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e009      	b.n	8001e32 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <vTaskDelete+0x110>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <vTaskDelete+0x110>)
 8001e26:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fb15 	bl	8002458 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001e2e:	f000 fb43 	bl	80024b8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8001e32:	f000 fd27 	bl	8002884 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <vTaskDelete+0x114>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01b      	beq.n	8001e76 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <vTaskDelete+0xf8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d116      	bne.n	8001e76 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <vTaskDelete+0x118>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <vTaskDelete+0xde>
	__asm volatile
 8001e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	f3bf 8f4f 	dsb	sy
 8001e60:	60bb      	str	r3, [r7, #8]
}
 8001e62:	bf00      	nop
 8001e64:	e7fe      	b.n	8001e64 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <vTaskDelete+0x11c>)
 8001e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200002cc 	.word	0x200002cc
 8001e84:	200002d0 	.word	0x200002d0
 8001e88:	200003d4 	.word	0x200003d4
 8001e8c:	200003e8 	.word	0x200003e8
 8001e90:	200003a0 	.word	0x200003a0
 8001e94:	200003b4 	.word	0x200003b4
 8001e98:	200003cc 	.word	0x200003cc
 8001e9c:	200003d8 	.word	0x200003d8
 8001ea0:	200003f4 	.word	0x200003f4
 8001ea4:	e000ed04 	.word	0xe000ed04

08001ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <vTaskDelay+0x60>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <vTaskDelay+0x30>
	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	60bb      	str	r3, [r7, #8]
}
 8001ed4:	bf00      	nop
 8001ed6:	e7fe      	b.n	8001ed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001ed8:	f000 f87a 	bl	8001fd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001edc:	2100      	movs	r1, #0
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fb0a 	bl	80024f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001ee4:	f000 f882 	bl	8001fec <xTaskResumeAll>
 8001ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <vTaskDelay+0x64>)
 8001ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200003f4 	.word	0x200003f4
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f1e:	463a      	mov	r2, r7
 8001f20:	1d39      	adds	r1, r7, #4
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fad8 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	9202      	str	r2, [sp, #8]
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	491e      	ldr	r1, [pc, #120]	; (8001fb8 <vTaskStartScheduler+0xa8>)
 8001f40:	481e      	ldr	r0, [pc, #120]	; (8001fbc <vTaskStartScheduler+0xac>)
 8001f42:	f7ff fd8d 	bl	8001a60 <xTaskCreateStatic>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <vTaskStartScheduler+0xb0>)
 8001f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <vTaskStartScheduler+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e001      	b.n	8001f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d116      	bne.n	8001f92 <vTaskStartScheduler+0x82>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	613b      	str	r3, [r7, #16]
}
 8001f76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <vTaskStartScheduler+0xb4>)
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <vTaskStartScheduler+0xb8>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <vTaskStartScheduler+0xbc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f8c:	f000 fba8 	bl	80026e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f90:	e00e      	b.n	8001fb0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d10a      	bne.n	8001fb0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9e:	f383 8811 	msr	BASEPRI, r3
 8001fa2:	f3bf 8f6f 	isb	sy
 8001fa6:	f3bf 8f4f 	dsb	sy
 8001faa:	60fb      	str	r3, [r7, #12]
}
 8001fac:	bf00      	nop
 8001fae:	e7fe      	b.n	8001fae <vTaskStartScheduler+0x9e>
}
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	08002e34 	.word	0x08002e34
 8001fbc:	0800234d 	.word	0x0800234d
 8001fc0:	200003f0 	.word	0x200003f0
 8001fc4:	200003ec 	.word	0x200003ec
 8001fc8:	200003d8 	.word	0x200003d8
 8001fcc:	200003d0 	.word	0x200003d0

08001fd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <vTaskSuspendAll+0x18>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <vTaskSuspendAll+0x18>)
 8001fdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	200003f4 	.word	0x200003f4

08001fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <xTaskResumeAll+0x114>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <xTaskResumeAll+0x2c>
	__asm volatile
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	603b      	str	r3, [r7, #0]
}
 8002014:	bf00      	nop
 8002016:	e7fe      	b.n	8002016 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002018:	f000 fc04 	bl	8002824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800201c:	4b38      	ldr	r3, [pc, #224]	; (8002100 <xTaskResumeAll+0x114>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	4a37      	ldr	r2, [pc, #220]	; (8002100 <xTaskResumeAll+0x114>)
 8002024:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <xTaskResumeAll+0x114>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d161      	bne.n	80020f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <xTaskResumeAll+0x118>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d05d      	beq.n	80020f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002036:	e02e      	b.n	8002096 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <xTaskResumeAll+0x11c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3318      	adds	r3, #24
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fce1 	bl	8001a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fcdc 	bl	8001a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2201      	movs	r2, #1
 800205a:	409a      	lsls	r2, r3
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <xTaskResumeAll+0x120>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	4a2a      	ldr	r2, [pc, #168]	; (800210c <xTaskResumeAll+0x120>)
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4a27      	ldr	r2, [pc, #156]	; (8002110 <xTaskResumeAll+0x124>)
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3304      	adds	r3, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f7ff fc68 	bl	8001952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <xTaskResumeAll+0x128>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	429a      	cmp	r2, r3
 800208e:	d302      	bcc.n	8002096 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <xTaskResumeAll+0x12c>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <xTaskResumeAll+0x11c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1cc      	bne.n	8002038 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80020a4:	f000 fa08 	bl	80024b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <xTaskResumeAll+0x130>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80020b4:	f000 f836 	bl	8002124 <xTaskIncrementTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <xTaskResumeAll+0x12c>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f1      	bne.n	80020b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <xTaskResumeAll+0x130>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <xTaskResumeAll+0x12c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80020de:	2301      	movs	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <xTaskResumeAll+0x134>)
 80020e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020f2:	f000 fbc7 	bl	8002884 <vPortExitCritical>

	return xAlreadyYielded;
 80020f6:	68bb      	ldr	r3, [r7, #8]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200003f4 	.word	0x200003f4
 8002104:	200003cc 	.word	0x200003cc
 8002108:	2000038c 	.word	0x2000038c
 800210c:	200003d4 	.word	0x200003d4
 8002110:	200002d0 	.word	0x200002d0
 8002114:	200002cc 	.word	0x200002cc
 8002118:	200003e0 	.word	0x200003e0
 800211c:	200003dc 	.word	0x200003dc
 8002120:	e000ed04 	.word	0xe000ed04

08002124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800212e:	4b4e      	ldr	r3, [pc, #312]	; (8002268 <xTaskIncrementTick+0x144>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 808e 	bne.w	8002254 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <xTaskIncrementTick+0x148>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002140:	4a4a      	ldr	r2, [pc, #296]	; (800226c <xTaskIncrementTick+0x148>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d120      	bne.n	800218e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800214c:	4b48      	ldr	r3, [pc, #288]	; (8002270 <xTaskIncrementTick+0x14c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <xTaskIncrementTick+0x48>
	__asm volatile
 8002156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215a:	f383 8811 	msr	BASEPRI, r3
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	603b      	str	r3, [r7, #0]
}
 8002168:	bf00      	nop
 800216a:	e7fe      	b.n	800216a <xTaskIncrementTick+0x46>
 800216c:	4b40      	ldr	r3, [pc, #256]	; (8002270 <xTaskIncrementTick+0x14c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b40      	ldr	r3, [pc, #256]	; (8002274 <xTaskIncrementTick+0x150>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3e      	ldr	r2, [pc, #248]	; (8002270 <xTaskIncrementTick+0x14c>)
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4a3e      	ldr	r2, [pc, #248]	; (8002274 <xTaskIncrementTick+0x150>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <xTaskIncrementTick+0x154>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	4a3c      	ldr	r2, [pc, #240]	; (8002278 <xTaskIncrementTick+0x154>)
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	f000 f995 	bl	80024b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <xTaskIncrementTick+0x158>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d348      	bcc.n	800222a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <xTaskIncrementTick+0x14c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d104      	bne.n	80021ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <xTaskIncrementTick+0x158>)
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	601a      	str	r2, [r3, #0]
					break;
 80021aa:	e03e      	b.n	800222a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <xTaskIncrementTick+0x14c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d203      	bcs.n	80021cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80021c4:	4a2d      	ldr	r2, [pc, #180]	; (800227c <xTaskIncrementTick+0x158>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80021ca:	e02e      	b.n	800222a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fc1b 	bl	8001a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3318      	adds	r3, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc12 	bl	8001a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2201      	movs	r2, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <xTaskIncrementTick+0x15c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	4a22      	ldr	r2, [pc, #136]	; (8002280 <xTaskIncrementTick+0x15c>)
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <xTaskIncrementTick+0x160>)
 8002208:	441a      	add	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3304      	adds	r3, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f7ff fb9e 	bl	8001952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <xTaskIncrementTick+0x164>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	429a      	cmp	r2, r3
 8002222:	d3b9      	bcc.n	8002198 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002224:	2301      	movs	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002228:	e7b6      	b.n	8002198 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <xTaskIncrementTick+0x164>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002230:	4914      	ldr	r1, [pc, #80]	; (8002284 <xTaskIncrementTick+0x160>)
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d901      	bls.n	8002246 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002242:	2301      	movs	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <xTaskIncrementTick+0x168>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800224e:	2301      	movs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e004      	b.n	800225e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <xTaskIncrementTick+0x16c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <xTaskIncrementTick+0x16c>)
 800225c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800225e:	697b      	ldr	r3, [r7, #20]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200003f4 	.word	0x200003f4
 800226c:	200003d0 	.word	0x200003d0
 8002270:	20000384 	.word	0x20000384
 8002274:	20000388 	.word	0x20000388
 8002278:	200003e4 	.word	0x200003e4
 800227c:	200003ec 	.word	0x200003ec
 8002280:	200003d4 	.word	0x200003d4
 8002284:	200002d0 	.word	0x200002d0
 8002288:	200002cc 	.word	0x200002cc
 800228c:	200003e0 	.word	0x200003e0
 8002290:	200003dc 	.word	0x200003dc

08002294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <vTaskSwitchContext+0xa4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <vTaskSwitchContext+0xa8>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80022a8:	e03f      	b.n	800232a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <vTaskSwitchContext+0xa8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <vTaskSwitchContext+0xac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f1c3 031f 	rsb	r3, r3, #31
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	491f      	ldr	r1, [pc, #124]	; (8002344 <vTaskSwitchContext+0xb0>)
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	607b      	str	r3, [r7, #4]
}
 80022ec:	bf00      	nop
 80022ee:	e7fe      	b.n	80022ee <vTaskSwitchContext+0x5a>
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <vTaskSwitchContext+0xb0>)
 80022fc:	4413      	add	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3308      	adds	r3, #8
 8002312:	429a      	cmp	r2, r3
 8002314:	d104      	bne.n	8002320 <vTaskSwitchContext+0x8c>
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <vTaskSwitchContext+0xb4>)
 8002328:	6013      	str	r3, [r2, #0]
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200003f4 	.word	0x200003f4
 800233c:	200003e0 	.word	0x200003e0
 8002340:	200003d4 	.word	0x200003d4
 8002344:	200002d0 	.word	0x200002d0
 8002348:	200002cc 	.word	0x200002cc

0800234c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002354:	f000 f852 	bl	80023fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <prvIdleTask+0x28>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d9f9      	bls.n	8002354 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <prvIdleTask+0x2c>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002370:	e7f0      	b.n	8002354 <prvIdleTask+0x8>
 8002372:	bf00      	nop
 8002374:	200002d0 	.word	0x200002d0
 8002378:	e000ed04 	.word	0xe000ed04

0800237c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	e00c      	b.n	80023a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <prvInitialiseTaskLists+0x60>)
 8002394:	4413      	add	r3, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff faae 	bl	80018f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3301      	adds	r3, #1
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d9ef      	bls.n	8002388 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <prvInitialiseTaskLists+0x64>)
 80023aa:	f7ff faa5 	bl	80018f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <prvInitialiseTaskLists+0x68>)
 80023b0:	f7ff faa2 	bl	80018f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <prvInitialiseTaskLists+0x6c>)
 80023b6:	f7ff fa9f 	bl	80018f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023ba:	480c      	ldr	r0, [pc, #48]	; (80023ec <prvInitialiseTaskLists+0x70>)
 80023bc:	f7ff fa9c 	bl	80018f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <prvInitialiseTaskLists+0x74>)
 80023c2:	f7ff fa99 	bl	80018f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <prvInitialiseTaskLists+0x78>)
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <prvInitialiseTaskLists+0x64>)
 80023ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <prvInitialiseTaskLists+0x7c>)
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <prvInitialiseTaskLists+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002d0 	.word	0x200002d0
 80023e0:	2000035c 	.word	0x2000035c
 80023e4:	20000370 	.word	0x20000370
 80023e8:	2000038c 	.word	0x2000038c
 80023ec:	200003a0 	.word	0x200003a0
 80023f0:	200003b8 	.word	0x200003b8
 80023f4:	20000384 	.word	0x20000384
 80023f8:	20000388 	.word	0x20000388

080023fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002402:	e019      	b.n	8002438 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002404:	f000 fa0e 	bl	8002824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <prvCheckTasksWaitingTermination+0x50>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff faf9 	bl	8001a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <prvCheckTasksWaitingTermination+0x54>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <prvCheckTasksWaitingTermination+0x54>)
 8002422:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <prvCheckTasksWaitingTermination+0x58>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <prvCheckTasksWaitingTermination+0x58>)
 800242c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800242e:	f000 fa29 	bl	8002884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f810 	bl	8002458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <prvCheckTasksWaitingTermination+0x58>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e1      	bne.n	8002404 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200003a0 	.word	0x200003a0
 8002450:	200003cc 	.word	0x200003cc
 8002454:	200003b4 	.word	0x200003b4

08002458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fb86 	bl	8002b80 <vPortFree>
				vPortFree( pxTCB );
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fb83 	bl	8002b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800247a:	e018      	b.n	80024ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002482:	2b01      	cmp	r3, #1
 8002484:	d103      	bne.n	800248e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fb7a 	bl	8002b80 <vPortFree>
	}
 800248c:	e00f      	b.n	80024ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002494:	2b02      	cmp	r3, #2
 8002496:	d00a      	beq.n	80024ae <prvDeleteTCB+0x56>
	__asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	60fb      	str	r3, [r7, #12]
}
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <prvDeleteTCB+0x54>
	}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <prvResetNextTaskUnblockTime+0x38>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <prvResetNextTaskUnblockTime+0x3c>)
 80024ca:	f04f 32ff 	mov.w	r2, #4294967295
 80024ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024d0:	e008      	b.n	80024e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <prvResetNextTaskUnblockTime+0x38>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <prvResetNextTaskUnblockTime+0x3c>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	20000384 	.word	0x20000384
 80024f4:	200003ec 	.word	0x200003ec

080024f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa7c 	bl	8001a0c <uxListRemove>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2201      	movs	r2, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4013      	ands	r3, r2
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002530:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d10a      	bne.n	8002550 <prvAddCurrentTaskToDelayedList+0x58>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	481a      	ldr	r0, [pc, #104]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800254a:	f7ff fa02 	bl	8001952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800254e:	e026      	b.n	800259e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d209      	bcs.n	800257c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3304      	adds	r3, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff fa10 	bl	800199a <vListInsert>
}
 800257a:	e010      	b.n	800259e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3304      	adds	r3, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7ff fa06 	bl	800199a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d202      	bcs.n	800259e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002598:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6013      	str	r3, [r2, #0]
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200003d0 	.word	0x200003d0
 80025ac:	200002cc 	.word	0x200002cc
 80025b0:	200003d4 	.word	0x200003d4
 80025b4:	200003b8 	.word	0x200003b8
 80025b8:	20000388 	.word	0x20000388
 80025bc:	20000384 	.word	0x20000384
 80025c0:	200003ec 	.word	0x200003ec

080025c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3b04      	subs	r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3b04      	subs	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f023 0201 	bic.w	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3b04      	subs	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <pxPortInitialiseStack+0x64>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3b14      	subs	r3, #20
 80025fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b04      	subs	r3, #4
 800260a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f06f 0202 	mvn.w	r2, #2
 8002612:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3b20      	subs	r3, #32
 8002618:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	0800262d 	.word	0x0800262d

0800262c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <prvTaskExitError+0x54>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d00a      	beq.n	8002656 <prvTaskExitError+0x2a>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	60fb      	str	r3, [r7, #12]
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <prvTaskExitError+0x28>
	__asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	60bb      	str	r3, [r7, #8]
}
 8002668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800266a:	bf00      	nop
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0fc      	beq.n	800266c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	2000000c 	.word	0x2000000c
	...

08002690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <pxCurrentTCBConst2>)
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	6808      	ldr	r0, [r1, #0]
 8002696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269a:	f380 8809 	msr	PSP, r0
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f380 8811 	msr	BASEPRI, r0
 80026aa:	4770      	bx	lr
 80026ac:	f3af 8000 	nop.w

080026b0 <pxCurrentTCBConst2>:
 80026b0:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop

080026b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <prvPortStartFirstTask+0x24>)
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	6800      	ldr	r0, [r0, #0]
 80026be:	f380 8808 	msr	MSP, r0
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f380 8814 	msr	CONTROL, r0
 80026ca:	b662      	cpsie	i
 80026cc:	b661      	cpsie	f
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	df00      	svc	0
 80026d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80026da:	bf00      	nop
 80026dc:	e000ed08 	.word	0xe000ed08

080026e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <xPortStartScheduler+0x120>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a46      	ldr	r2, [pc, #280]	; (8002804 <xPortStartScheduler+0x124>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10a      	bne.n	8002706 <xPortStartScheduler+0x26>
	__asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	613b      	str	r3, [r7, #16]
}
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <xPortStartScheduler+0x120>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <xPortStartScheduler+0x128>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10a      	bne.n	8002726 <xPortStartScheduler+0x46>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	60fb      	str	r3, [r7, #12]
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <xPortStartScheduler+0x12c>)
 8002728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	22ff      	movs	r2, #255	; 0xff
 8002736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <xPortStartScheduler+0x130>)
 800274c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <xPortStartScheduler+0x134>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002754:	e009      	b.n	800276a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <xPortStartScheduler+0x134>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <xPortStartScheduler+0x134>)
 800275e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d0ef      	beq.n	8002756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <xPortStartScheduler+0x134>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	d00a      	beq.n	8002798 <xPortStartScheduler+0xb8>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	60bb      	str	r3, [r7, #8]
}
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <xPortStartScheduler+0x134>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <xPortStartScheduler+0x134>)
 80027a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <xPortStartScheduler+0x134>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027aa:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <xPortStartScheduler+0x134>)
 80027ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <xPortStartScheduler+0x138>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <xPortStartScheduler+0x138>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <xPortStartScheduler+0x138>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a14      	ldr	r2, [pc, #80]	; (8002818 <xPortStartScheduler+0x138>)
 80027c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80027cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80027ce:	f000 f8dd 	bl	800298c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <xPortStartScheduler+0x13c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80027d8:	f000 f8fc 	bl	80029d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <xPortStartScheduler+0x140>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <xPortStartScheduler+0x140>)
 80027e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80027e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80027e8:	f7ff ff66 	bl	80026b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80027ec:	f7ff fd52 	bl	8002294 <vTaskSwitchContext>
	prvTaskExitError();
 80027f0:	f7ff ff1c 	bl	800262c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	410fc271 	.word	0x410fc271
 8002808:	410fc270 	.word	0x410fc270
 800280c:	e000e400 	.word	0xe000e400
 8002810:	200003f8 	.word	0x200003f8
 8002814:	200003fc 	.word	0x200003fc
 8002818:	e000ed20 	.word	0xe000ed20
 800281c:	2000000c 	.word	0x2000000c
 8002820:	e000ef34 	.word	0xe000ef34

08002824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
	__asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	607b      	str	r3, [r7, #4]
}
 800283c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <vPortEnterCritical+0x58>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <vPortEnterCritical+0x58>)
 8002846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <vPortEnterCritical+0x58>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10f      	bne.n	8002870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <vPortEnterCritical+0x5c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <vPortEnterCritical+0x4c>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	603b      	str	r3, [r7, #0]
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <vPortEnterCritical+0x4a>
	}
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	2000000c 	.word	0x2000000c
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <vPortExitCritical+0x50>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <vPortExitCritical+0x24>
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	607b      	str	r3, [r7, #4]
}
 80028a4:	bf00      	nop
 80028a6:	e7fe      	b.n	80028a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <vPortExitCritical+0x50>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <vPortExitCritical+0x50>)
 80028b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <vPortExitCritical+0x50>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <vPortExitCritical+0x42>
 80028ba:	2300      	movs	r3, #0
 80028bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c
	...

080028e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028e0:	f3ef 8009 	mrs	r0, PSP
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <pxCurrentTCBConst>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f01e 0f10 	tst.w	lr, #16
 80028f0:	bf08      	it	eq
 80028f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fa:	6010      	str	r0, [r2, #0]
 80028fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002904:	f380 8811 	msr	BASEPRI, r0
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f7ff fcc0 	bl	8002294 <vTaskSwitchContext>
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f380 8811 	msr	BASEPRI, r0
 800291c:	bc09      	pop	{r0, r3}
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	6808      	ldr	r0, [r1, #0]
 8002922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002926:	f01e 0f10 	tst.w	lr, #16
 800292a:	bf08      	it	eq
 800292c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002930:	f380 8809 	msr	PSP, r0
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	f3af 8000 	nop.w

08002940 <pxCurrentTCBConst>:
 8002940:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop

08002948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	607b      	str	r3, [r7, #4]
}
 8002960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002962:	f7ff fbdf 	bl	8002124 <xTaskIncrementTick>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <SysTick_Handler+0x40>)
 800296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f383 8811 	msr	BASEPRI, r3
}
 800297e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <vPortSetupTimerInterrupt+0x34>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <vPortSetupTimerInterrupt+0x38>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <vPortSetupTimerInterrupt+0x3c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <vPortSetupTimerInterrupt+0x40>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <vPortSetupTimerInterrupt+0x44>)
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <vPortSetupTimerInterrupt+0x34>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010
 80029c4:	e000e018 	.word	0xe000e018
 80029c8:	20000000 	.word	0x20000000
 80029cc:	10624dd3 	.word	0x10624dd3
 80029d0:	e000e014 	.word	0xe000e014

080029d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80029d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029e4 <vPortEnableVFP+0x10>
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029de:	6001      	str	r1, [r0, #0]
 80029e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80029e2:	bf00      	nop
 80029e4:	e000ed88 	.word	0xe000ed88

080029e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029f4:	f7ff faec 	bl	8001fd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029f8:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <pvPortMalloc+0x180>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a00:	f000 f920 	bl	8002c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <pvPortMalloc+0x184>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 8093 	bne.w	8002b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01d      	beq.n	8002a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002a18:	2208      	movs	r2, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d014      	beq.n	8002a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f023 0307 	bic.w	r3, r3, #7
 8002a30:	3308      	adds	r3, #8
 8002a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <pvPortMalloc+0x6c>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	617b      	str	r3, [r7, #20]
}
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06e      	beq.n	8002b38 <pvPortMalloc+0x150>
 8002a5a:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <pvPortMalloc+0x188>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d869      	bhi.n	8002b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a64:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <pvPortMalloc+0x18c>)
 8002a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <pvPortMalloc+0x18c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a6e:	e004      	b.n	8002a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d903      	bls.n	8002a8c <pvPortMalloc+0xa4>
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f1      	bne.n	8002a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <pvPortMalloc+0x180>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d050      	beq.n	8002b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	4413      	add	r3, r2
 8002a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d91f      	bls.n	8002af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	613b      	str	r3, [r7, #16]
}
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002af2:	69b8      	ldr	r0, [r7, #24]
 8002af4:	f000 f908 	bl	8002d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <pvPortMalloc+0x188>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <pvPortMalloc+0x188>)
 8002b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <pvPortMalloc+0x188>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <pvPortMalloc+0x190>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d203      	bcs.n	8002b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <pvPortMalloc+0x188>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <pvPortMalloc+0x190>)
 8002b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <pvPortMalloc+0x184>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <pvPortMalloc+0x194>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <pvPortMalloc+0x194>)
 8002b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b38:	f7ff fa58 	bl	8001fec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <pvPortMalloc+0x174>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	60fb      	str	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <pvPortMalloc+0x172>
	return pvReturn;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20004008 	.word	0x20004008
 8002b6c:	2000401c 	.word	0x2000401c
 8002b70:	2000400c 	.word	0x2000400c
 8002b74:	20004000 	.word	0x20004000
 8002b78:	20004010 	.word	0x20004010
 8002b7c:	20004014 	.word	0x20004014

08002b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04d      	beq.n	8002c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b92:	2308      	movs	r3, #8
 8002b94:	425b      	negs	r3, r3
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4413      	add	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <vPortFree+0xb8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <vPortFree+0x44>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	60fb      	str	r3, [r7, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <vPortFree+0x62>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	60bb      	str	r3, [r7, #8]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <vPortFree+0xb8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01e      	beq.n	8002c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11a      	bne.n	8002c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <vPortFree+0xb8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	401a      	ands	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c08:	f7ff f9e2 	bl	8001fd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <vPortFree+0xbc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <vPortFree+0xbc>)
 8002c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c1a:	6938      	ldr	r0, [r7, #16]
 8002c1c:	f000 f874 	bl	8002d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <vPortFree+0xc0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <vPortFree+0xc0>)
 8002c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002c2a:	f7ff f9df 	bl	8001fec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000401c 	.word	0x2000401c
 8002c3c:	2000400c 	.word	0x2000400c
 8002c40:	20004018 	.word	0x20004018

08002c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <prvHeapInit+0xac>)
 8002c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3307      	adds	r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0307 	bic.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <prvHeapInit+0xac>)
 8002c74:	4413      	add	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <prvHeapInit+0xb0>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c82:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <prvHeapInit+0xb0>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c90:	2208      	movs	r2, #8
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0307 	bic.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <prvHeapInit+0xb4>)
 8002ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <prvHeapInit+0xb4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <prvHeapInit+0xb4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	1ad2      	subs	r2, r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <prvHeapInit+0xb4>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <prvHeapInit+0xb8>)
 8002cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <prvHeapInit+0xbc>)
 8002cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <prvHeapInit+0xc0>)
 8002cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	20000400 	.word	0x20000400
 8002cf4:	20004000 	.word	0x20004000
 8002cf8:	20004008 	.word	0x20004008
 8002cfc:	20004010 	.word	0x20004010
 8002d00:	2000400c 	.word	0x2000400c
 8002d04:	2000401c 	.word	0x2000401c

08002d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <prvInsertBlockIntoFreeList+0xac>)
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e002      	b.n	8002d1c <prvInsertBlockIntoFreeList+0x14>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d8f7      	bhi.n	8002d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4413      	add	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d108      	bne.n	8002d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	441a      	add	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d118      	bne.n	8002d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <prvInsertBlockIntoFreeList+0xb0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d00d      	beq.n	8002d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e008      	b.n	8002d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <prvInsertBlockIntoFreeList+0xb0>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e003      	b.n	8002d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d002      	beq.n	8002da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20004000 	.word	0x20004000
 8002db8:	20004008 	.word	0x20004008

08002dbc <memset>:
 8002dbc:	4402      	add	r2, r0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <memset+0xa>
 8002dc4:	4770      	bx	lr
 8002dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dca:	e7f9      	b.n	8002dc0 <memset+0x4>

08002dcc <__libc_init_array>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	4d0d      	ldr	r5, [pc, #52]	; (8002e04 <__libc_init_array+0x38>)
 8002dd0:	4c0d      	ldr	r4, [pc, #52]	; (8002e08 <__libc_init_array+0x3c>)
 8002dd2:	1b64      	subs	r4, r4, r5
 8002dd4:	10a4      	asrs	r4, r4, #2
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	42a6      	cmp	r6, r4
 8002dda:	d109      	bne.n	8002df0 <__libc_init_array+0x24>
 8002ddc:	4d0b      	ldr	r5, [pc, #44]	; (8002e0c <__libc_init_array+0x40>)
 8002dde:	4c0c      	ldr	r4, [pc, #48]	; (8002e10 <__libc_init_array+0x44>)
 8002de0:	f000 f818 	bl	8002e14 <_init>
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	2600      	movs	r6, #0
 8002dea:	42a6      	cmp	r6, r4
 8002dec:	d105      	bne.n	8002dfa <__libc_init_array+0x2e>
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df4:	4798      	blx	r3
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ee      	b.n	8002dd8 <__libc_init_array+0xc>
 8002dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfe:	4798      	blx	r3
 8002e00:	3601      	adds	r6, #1
 8002e02:	e7f2      	b.n	8002dea <__libc_init_array+0x1e>
 8002e04:	08002e5c 	.word	0x08002e5c
 8002e08:	08002e5c 	.word	0x08002e5c
 8002e0c:	08002e5c 	.word	0x08002e5c
 8002e10:	08002e60 	.word	0x08002e60

08002e14 <_init>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	bf00      	nop
 8002e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1a:	bc08      	pop	{r3}
 8002e1c:	469e      	mov	lr, r3
 8002e1e:	4770      	bx	lr

08002e20 <_fini>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	bf00      	nop
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr
